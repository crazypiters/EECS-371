%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.6.0-20091004-56-g11921dc
%%CreationDate: Tue Nov  1 06:14:31 2011
%%Title: /home/ed/EECS-371/Lab 8/monostable.sch
%%Author: (null)
%%BoundingBox: 0 0 612 792
%%Orientation: Landscape
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
7485 499 translate 90 rotate
0.588235 0.588235 scale
-40000 -40000 translate
gsave
40000 40000 57000 40000 10 line
57000 40000 57000 51000 10 line
57000 51000 40000 51000 10 line
40000 51000 40000 40000 10 line
52900 40600 52900 40000 10 line
gsave
false false false false 208.000000 [(FILE:) ] 0 49500 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(REVISION:) ] 0 53000 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(DRAWN BY: ) ] 0 53000 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(PAGE) ] 0 49500 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(OF) ] 0 51200 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(TITLE) ] 0 49500 40700 144.444443 text
grestore
49400 40000 57000 40000 10 line
57000 40000 57000 41400 10 line
57000 41400 49400 41400 10 line
49400 41400 49400 40000 10 line
49400 40600 57000 40600 10 line
grestore
gsave
gsave
false false false false 208.000000 [(OUT) ] 0 48500 45700 144.444443 text
grestore
gsave
false false false false 208.000000 [(CTRL) ] 0 48430 46398 144.444443 text
grestore
gsave
false false false false 208.000000 [(THRES) ] 0 48300 46800 144.444443 text
grestore
gsave
false false false false 208.000000 [(DISC) ] 0 48469 47202 144.444443 text
grestore
48900 45700 49200 45700 10 line
gsave
false false false false 208.000000 [(3) ] 0 48998 45768 144.444443 text
grestore
48900 46400 49200 46400 10 line
gsave
false false false false 208.000000 [(5) ] 0 48998 46466 144.444443 text
grestore
48900 46800 49200 46800 10 line
gsave
false false false false 208.000000 [(6) ] 0 48998 46865 144.444443 text
grestore
48900 47200 49200 47200 10 line
gsave
false false false false 208.000000 [(7) ] 0 48998 47270 144.444443 text
grestore
gsave
false false false false 208.000000 [(RESET) ] 0 47406 47602 144.444443 text
grestore
gsave
false false false false 208.000000 [(VCC) ] 0 48340 47602 144.444443 text
grestore
48500 47800 48500 48100 10 line
gsave
false false false false 208.000000 [(8) ] 0 48301 47922 144.444443 text
grestore
47700 47800 47700 48100 10 line
gsave
false false false false 208.000000 [(4) ] 0 47502 47922 144.444443 text
grestore
gsave
false false false false 208.000000 [(TRIG) ] 0 47300 46800 144.444443 text
grestore
gsave
false false false false 208.000000 [(GND) ] 0 47300 45700 144.444443 text
grestore
46900 46800 47200 46800 10 line
gsave
false false false false 208.000000 [(2) ] 0 46996 46865 144.444443 text
grestore
46900 45700 47200 45700 10 line
gsave
false false false false 208.000000 [(1) ] 0 47029 45768 144.444443 text
grestore
gsave
false false false false 260.000000 [(LM555) ] 0 47200 45300 180.555557 text
grestore
47200 45500 48900 45500 10 line
48900 45500 48900 47800 10 line
48900 47800 47200 47800 10 line
47200 47800 47200 45500 10 line
grestore
gsave
false false false false 260.000000 [(U1) ] 0 48700 45300 180.555557 text
grestore
49200 47200 49200 46800 10 line
gsave
51000 45900 51000 46100 10 line
51000 46800 51000 46600 10 line
51200 46300 50800 46300 10 line
51200 46400 50800 46400 10 line
51000 46600 51000 46400 10 line
51000 46300 51000 46100 10 line
grestore
gsave
false false false true 260.000000 [(C2) ] 90 51300 46100 180.555557 text
grestore
gsave
false false false false 260.000000 [(.047uF) ] 0 50200 46300 180.555557 text
grestore
gsave
48500 48100 48500 48300 10 line
48650 48300 48350 48300 10 line
gsave
false true false false 208.000000 [(Vcc) ] 0 48625 48350 144.444443 text
grestore
grestore
gsave
46900 45500 46900 45700 10 line
47000 45500 46800 45500 10 line
46945 45450 46855 45450 10 line
46920 45410 46880 45410 10 line
grestore
46900 46800 44000 46800 10 line
gsave
43800 46800 44000 46800 10 line
43200 46700 43200 46900 10 line
43200 46700 43700 46700 10 line
43700 46700 43800 46800 10 line
43800 46800 43700 46900 10 line
43700 46900 43200 46900 10 line
grestore
gsave
false true false false 260.000000 [(TRIG) ] 0 43200 46700 180.555557 text
grestore
49200 46800 51000 46800 10 line
51000 46800 51000 47200 10 line
gsave
51000 45400 51000 45600 10 line
51100 45400 50900 45400 10 line
51045 45350 50955 45350 10 line
51020 45310 50980 45310 10 line
grestore
gsave
51000 47200 51000 47400 10 line
gsave
false true false true 156.000000 [(C) ] 0 51100 47350 108.333336 text
grestore
51000 48000 51000 48200 10 line
gsave
false true false true 156.000000 [(E) ] 0 51100 48150 108.333336 text
grestore
51100 47699 316 0 360 10 darc
51000 48000 51200 47800 10 line
51000 47400 51200 47600 10 line
51200 47500 51200 47900 10 line
51600 47700 51416 47700 10 line
gsave
false true false true 156.000000 [(B) ] 0 51500 47650 108.333336 text
grestore
51200 47700 51416 47700 10 line
10 setlinewidth
51160 47910 moveto 51200 47799 lineto 51105 47845 lineto 51135 47865 lineto closepath stroke
51160 47910 moveto 51200 47799 lineto 51105 47845 lineto 51135 47865 lineto closepath fill
grestore
gsave
false true false true 260.000000 [(Q1) ] 0 50700 47700 180.555557 text
grestore
gsave
51000 49600 51000 49800 10 line
51150 49800 50850 49800 10 line
gsave
false true false false 208.000000 [(Vcc) ] 0 51125 49850 144.444443 text
grestore
grestore
gsave
53200 47400 53000 47300 10 line
53000 47300 53200 47200 10 line
53200 47200 53000 47100 10 line
53000 47100 53200 47000 10 line
53200 47400 53000 47500 10 line
53000 47500 53100 47550 10 line
53100 47700 53100 47550 10 line
53100 46800 53100 46952 10 line
53200 47001 53100 46950 10 line
grestore
gsave
false false false true 260.000000 [(R4) ] 90 53300 47000 180.555557 text
grestore
gsave
false false false false 260.000000 [(3.3k) ] 0 52700 47000 180.555557 text
grestore
gsave
51100 49000 50900 48900 10 line
50900 48900 51100 48800 10 line
51100 48800 50900 48700 10 line
50900 48700 51100 48600 10 line
51100 49000 50900 49100 10 line
50900 49100 51000 49150 10 line
51000 49300 51000 49150 10 line
51000 48400 51000 48552 10 line
51100 48601 51000 48550 10 line
grestore
gsave
false false false true 260.000000 [(R1) ] 90 51200 48600 180.555557 text
grestore
gsave
false false false false 260.000000 [(4.3k) ] 0 50500 48800 180.555557 text
grestore
51000 49600 53100 49600 10 line
51000 49600 51000 49300 10 line
51000 45600 53100 45600 10 line
53100 45600 53100 46800 10 line
gsave
46900 47900 46900 48100 10 line
47000 47900 46800 47900 10 line
46945 47850 46855 47850 10 line
46920 47810 46880 47810 10 line
grestore
46900 48100 47700 48100 10 line
49200 45700 50400 45700 10 line
50400 44600 50400 45700 10 line
50400 44600 54400 44600 10 line
gsave
54400 44600 54600 44600 10 line
54600 44700 54600 44500 10 line
54600 44700 55100 44700 10 line
55100 44700 55200 44600 10 line
55200 44600 55100 44500 10 line
55100 44500 54600 44500 10 line
grestore
gsave
false false false false 260.000000 [(OUT) ] 0 55300 44500 180.555557 text
grestore
51000 48400 51000 48200 10 line
52200 47700 52200 47900 10 line
gsave
53200 49200 53000 49100 10 line
53000 49100 53200 49000 10 line
53200 49000 53000 48900 10 line
53000 48900 53200 48800 10 line
53200 49200 53000 49300 10 line
53000 49300 53100 49350 10 line
53100 49500 53100 49350 10 line
53100 48600 53100 48752 10 line
53200 48801 53100 48750 10 line
grestore
gsave
false false false true 260.000000 [(R2) ] 90 53300 48800 180.555557 text
grestore
gsave
false false false false 260.000000 [(560) ] 0 52700 49000 180.555557 text
grestore
53100 49500 53100 49600 10 line
53100 48600 53100 47700 10 line
gsave
52200 48900 52200 48700 10 line
gsave
false true false false 156.000000 [(C) ] 0 52300 48750 108.333336 text
grestore
52200 48100 52200 47900 10 line
gsave
false true false false 156.000000 [(E) ] 0 52300 47950 108.333336 text
grestore
52300 48401 316 0 360 10 darc
52200 48100 52400 48300 10 line
52200 48700 52400 48500 10 line
52400 48600 52400 48200 10 line
52800 48400 52616 48400 10 line
gsave
false true false false 156.000000 [(B) ] 0 52700 48450 108.333336 text
grestore
52400 48400 52616 48400 10 line
10 setlinewidth
52290 48140 moveto 52199 48100 lineto 52245 48195 lineto 52265 48165 lineto closepath stroke
52290 48140 moveto 52199 48100 lineto 52245 48195 lineto 52265 48165 lineto closepath fill
grestore
gsave
false true false false 260.000000 [(Q2) ] 0 51900 48400 180.555557 text
grestore
52200 48900 52200 49600 10 line
51600 47700 52200 47700 10 line
51000 45900 51000 45600 10 line
gsave
49200 46400 49400 46400 10 line
50100 46400 49900 46400 10 line
49600 46600 49600 46200 10 line
49700 46600 49700 46200 10 line
49900 46400 49700 46400 10 line
49600 46400 49400 46400 10 line
grestore
gsave
false false false false 260.000000 [(C1) ] 0 49400 46700 180.555557 text
grestore
gsave
false false false false 260.000000 [(0.1uF) ] 0 49400 46000 180.555557 text
grestore
gsave
50100 46200 50100 46400 10 line
50200 46200 50000 46200 10 line
50145 46150 50055 46150 10 line
50120 46110 50080 46110 10 line
grestore
gsave
false false false false 260.000000 [(Monostable) (\(Note that 555 is the one designed in 555 schematics\)) ] 0 50200 40800 180.555557 text
grestore
gsave
51900 47400 51700 47300 10 line
51700 47300 51900 47200 10 line
51900 47200 51700 47100 10 line
51700 47100 51900 47000 10 line
51900 47400 51700 47500 10 line
51700 47500 51800 47550 10 line
51800 47700 51800 47550 10 line
51800 46800 51800 46952 10 line
51900 47001 51800 46950 10 line
newpath
51800 47700
25
0 360 arc
fill
newpath
51800 47700
25
0 360 arc
fill
grestore
gsave
false false false true 260.000000 [(R3) ] 90 52000 47000 180.555557 text
grestore
gsave
false false false false 260.000000 [(10k) ] 0 51400 47000 180.555557 text
grestore
52800 48400 53100 48400 10 line
51800 46800 51800 45600 10 line
newpath
49200 46800
25
0 360 arc
fill
newpath
49200 46800
25
0 360 arc
fill
newpath
51000 46800
25
0 360 arc
fill
newpath
51000 46800
25
0 360 arc
fill
newpath
51000 49600
25
0 360 arc
fill
newpath
52200 49600
25
0 360 arc
fill
newpath
51000 49600
25
0 360 arc
fill
newpath
51000 45600
25
0 360 arc
fill
newpath
51800 45600
25
0 360 arc
fill
newpath
53100 48400
25
0 360 arc
fill
newpath
52200 49600
25
0 360 arc
fill
newpath
52200 49600
25
0 360 arc
fill
newpath
51800 47700
25
0 360 arc
fill
newpath
51000 45600
25
0 360 arc
fill
newpath
51800 47700
25
0 360 arc
fill
newpath
51800 47700
25
0 360 arc
fill
newpath
53100 48400
25
0 360 arc
fill
newpath
53100 48400
25
0 360 arc
fill
newpath
51800 45600
25
0 360 arc
fill
newpath
51800 45600
25
0 360 arc
fill
showpage
%%End
