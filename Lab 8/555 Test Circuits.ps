%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.6.0-20091004-56-g11921dc
%%CreationDate: Tue Nov  1 06:13:43 2011
%%Title: /home/ed/EECS-371/Lab 8/555 Test Circuits.sch
%%Author: (null)
%%BoundingBox: 0 0 612 792
%%Orientation: Landscape
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
7485 499 translate 90 rotate
0.588235 0.588235 scale
-40000 -40000 translate
gsave
40000 40000 57000 40000 10 line
57000 40000 57000 51000 10 line
57000 51000 40000 51000 10 line
40000 51000 40000 40000 10 line
52900 40600 52900 40000 10 line
gsave
false false false false 208.000000 [(FILE:) ] 0 49500 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(REVISION:) ] 0 53000 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(DRAWN BY: ) ] 0 53000 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(PAGE) ] 0 49500 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(OF) ] 0 51200 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(TITLE) ] 0 49500 40700 144.444443 text
grestore
49400 40000 57000 40000 10 line
57000 40000 57000 41400 10 line
57000 41400 49400 41400 10 line
49400 41400 49400 40000 10 line
49400 40600 57000 40600 10 line
grestore
gsave
gsave
false false false false 208.000000 [(OUT) ] 0 54200 47500 144.444443 text
grestore
gsave
false false false false 208.000000 [(CTRL) ] 0 54130 48198 144.444443 text
grestore
gsave
false false false false 208.000000 [(THRES) ] 0 54000 48600 144.444443 text
grestore
gsave
false false false false 208.000000 [(DISC) ] 0 54169 49002 144.444443 text
grestore
54600 47500 54900 47500 10 line
gsave
false false false false 208.000000 [(3) ] 0 54698 47568 144.444443 text
grestore
54600 48200 54900 48200 10 line
gsave
false false false false 208.000000 [(5) ] 0 54698 48266 144.444443 text
grestore
54600 48600 54900 48600 10 line
gsave
false false false false 208.000000 [(6) ] 0 54698 48665 144.444443 text
grestore
54600 49000 54900 49000 10 line
gsave
false false false false 208.000000 [(7) ] 0 54698 49070 144.444443 text
grestore
gsave
false false false false 208.000000 [(RESET) ] 0 53106 49402 144.444443 text
grestore
gsave
false false false false 208.000000 [(VCC) ] 0 54040 49402 144.444443 text
grestore
54200 49600 54200 49900 10 line
gsave
false false false false 208.000000 [(8) ] 0 54001 49722 144.444443 text
grestore
53400 49600 53400 49900 10 line
gsave
false false false false 208.000000 [(4) ] 0 53202 49722 144.444443 text
grestore
gsave
false false false false 208.000000 [(TRIG) ] 0 53000 48600 144.444443 text
grestore
gsave
false false false false 208.000000 [(GND) ] 0 53000 47500 144.444443 text
grestore
52600 48600 52900 48600 10 line
gsave
false false false false 208.000000 [(2) ] 0 52696 48665 144.444443 text
grestore
52600 47500 52900 47500 10 line
gsave
false false false false 208.000000 [(1) ] 0 52729 47568 144.444443 text
grestore
gsave
false false false false 260.000000 [(LM555) ] 0 52900 47100 180.555557 text
grestore
52900 47300 54600 47300 10 line
54600 47300 54600 49600 10 line
54600 49600 52900 49600 10 line
52900 49600 52900 47300 10 line
grestore
gsave
false false false false 260.000000 [(U1) ] 0 54400 47100 180.555557 text
grestore
gsave
55800 49600 56000 49500 10 line
56000 49500 55800 49400 10 line
55800 49400 56000 49300 10 line
56000 49300 55800 49200 10 line
55800 49600 56000 49700 10 line
56000 49700 55900 49750 10 line
55900 49900 55900 49750 10 line
55900 49000 55900 49152 10 line
55800 49201 55900 49150 10 line
grestore
gsave
false false false false 260.000000 [(RA) ] 90 55700 49200 180.555557 text
grestore
gsave
false false false false 260.000000 [(1k) ] 0 56100 49400 180.555557 text
grestore
gsave
55900 46300 55900 46500 10 line
55900 47200 55900 47000 10 line
55700 46700 56100 46700 10 line
55700 46800 56100 46800 10 line
55900 47000 55900 46800 10 line
55900 46700 55900 46500 10 line
grestore
gsave
false false false false 260.000000 [(C1) ] 90 55600 46500 180.555557 text
grestore
gsave
false false false false 260.000000 [(2.2nF) ] 0 56100 46300 180.555557 text
grestore
54900 49000 55900 49000 10 line
55900 47200 55300 47200 10 line
54900 48600 55300 48600 10 line
55300 47200 55300 50400 10 line
52600 48600 52600 50400 10 line
52600 50400 55300 50400 10 line
gsave
gsave
false false false false 208.000000 [(OUT) ] 0 49100 47400 144.444443 text
grestore
gsave
false false false false 208.000000 [(CTRL) ] 0 49030 48098 144.444443 text
grestore
gsave
false false false false 208.000000 [(THRES) ] 0 48900 48500 144.444443 text
grestore
gsave
false false false false 208.000000 [(DISC) ] 0 49069 48902 144.444443 text
grestore
49500 47400 49800 47400 10 line
gsave
false false false false 208.000000 [(3) ] 0 49598 47468 144.444443 text
grestore
49500 48100 49800 48100 10 line
gsave
false false false false 208.000000 [(5) ] 0 49598 48166 144.444443 text
grestore
49500 48500 49800 48500 10 line
gsave
false false false false 208.000000 [(6) ] 0 49598 48565 144.444443 text
grestore
49500 48900 49800 48900 10 line
gsave
false false false false 208.000000 [(7) ] 0 49598 48970 144.444443 text
grestore
gsave
false false false false 208.000000 [(RESET) ] 0 48006 49302 144.444443 text
grestore
gsave
false false false false 208.000000 [(VCC) ] 0 48940 49302 144.444443 text
grestore
49100 49500 49100 49800 10 line
gsave
false false false false 208.000000 [(8) ] 0 48901 49622 144.444443 text
grestore
48300 49500 48300 49800 10 line
gsave
false false false false 208.000000 [(4) ] 0 48102 49622 144.444443 text
grestore
gsave
false false false false 208.000000 [(TRIG) ] 0 47900 48500 144.444443 text
grestore
gsave
false false false false 208.000000 [(GND) ] 0 47900 47400 144.444443 text
grestore
47500 48500 47800 48500 10 line
gsave
false false false false 208.000000 [(2) ] 0 47596 48565 144.444443 text
grestore
47500 47400 47800 47400 10 line
gsave
false false false false 208.000000 [(1) ] 0 47629 47468 144.444443 text
grestore
gsave
false false false false 260.000000 [(LM555) ] 0 47800 47000 180.555557 text
grestore
47800 47200 49500 47200 10 line
49500 47200 49500 49500 10 line
49500 49500 47800 49500 10 line
47800 49500 47800 47200 10 line
grestore
gsave
false false false false 260.000000 [(U1) ] 0 49300 47000 180.555557 text
grestore
gsave
50700 48600 50900 48500 10 line
50900 48500 50700 48400 10 line
50700 48400 50900 48300 10 line
50900 48300 50700 48200 10 line
50700 48600 50900 48700 10 line
50900 48700 50800 48750 10 line
50800 48900 50800 48750 10 line
50800 48000 50800 48152 10 line
50700 48201 50800 48150 10 line
grestore
gsave
false false false false 260.000000 [(RB) ] 90 50600 48200 180.555557 text
grestore
gsave
false false false false 260.000000 [(4.7k) ] 0 51000 48300 180.555557 text
grestore
gsave
50700 49500 50900 49400 10 line
50900 49400 50700 49300 10 line
50700 49300 50900 49200 10 line
50900 49200 50700 49100 10 line
50700 49500 50900 49600 10 line
50900 49600 50800 49650 10 line
50800 49800 50800 49650 10 line
50800 48900 50800 49052 10 line
50700 49101 50800 49050 10 line
grestore
gsave
false false false false 260.000000 [(RA) ] 90 50600 49100 180.555557 text
grestore
gsave
false false false false 260.000000 [(1k) ] 0 51000 49300 180.555557 text
grestore
gsave
50800 47100 50800 47300 10 line
50800 48000 50800 47800 10 line
50600 47500 51000 47500 10 line
50600 47600 51000 47600 10 line
50800 47800 50800 47600 10 line
50800 47500 50800 47300 10 line
grestore
gsave
false false false false 260.000000 [(C1) ] 90 50500 47300 180.555557 text
grestore
gsave
false false false false 260.000000 [(2.2nF) ] 0 51000 47100 180.555557 text
grestore
49800 48900 50800 48900 10 line
50800 48000 50200 48000 10 line
49800 48500 50200 48500 10 line
50200 48000 50200 50300 10 line
47500 48500 47500 50300 10 line
47500 50300 50200 50300 10 line
gsave
52600 47300 52600 47500 10 line
52500 47300 52700 47300 10 line
52555 47250 52645 47250 10 line
52580 47210 52620 47210 10 line
grestore
gsave
47500 47200 47500 47400 10 line
47400 47200 47600 47200 10 line
47455 47150 47545 47150 10 line
47480 47110 47520 47110 10 line
grestore
gsave
50800 46900 50800 47100 10 line
50700 46900 50900 46900 10 line
50755 46850 50845 46850 10 line
50780 46810 50820 46810 10 line
grestore
gsave
55900 46100 55900 46300 10 line
55800 46100 56000 46100 10 line
55855 46050 55945 46050 10 line
55880 46010 55920 46010 10 line
grestore
gsave
53400 50100 53400 49900 10 line
53500 50100 53300 50100 10 line
53445 50150 53355 50150 10 line
53420 50190 53380 50190 10 line
grestore
gsave
48300 50000 48300 49800 10 line
48400 50000 48200 50000 10 line
48345 50050 48255 50050 10 line
48320 50090 48280 50090 10 line
grestore
gsave
55900 49900 55900 50100 10 line
55750 50100 56050 50100 10 line
gsave
false false false false 208.000000 [(Vcc) ] 0 55775 50150 144.444443 text
grestore
grestore
gsave
54200 49900 54200 50100 10 line
54050 50100 54350 50100 10 line
gsave
false false false false 208.000000 [(Vcc) ] 0 54075 50150 144.444443 text
grestore
grestore
gsave
49100 49800 49100 50000 10 line
48950 50000 49250 50000 10 line
gsave
false false false false 208.000000 [(Vcc) ] 0 48975 50050 144.444443 text
grestore
grestore
gsave
50800 49800 50800 50000 10 line
50650 50000 50950 50000 10 line
gsave
false false false false 208.000000 [(Vcc) ] 0 50675 50050 144.444443 text
grestore
grestore
54900 47000 54900 47500 10 line
gsave
49800 45900 49800 46100 10 line
49700 45900 49900 45900 10 line
49755 45850 49845 45850 10 line
49780 45810 49820 45810 10 line
grestore
gsave
54900 45900 54900 46100 10 line
54800 45900 55000 45900 10 line
54855 45850 54945 45850 10 line
54880 45810 54920 45810 10 line
grestore
gsave
false false false false 260.000000 [(555 Test Circuits) ] 0 50300 40800 180.555557 text
grestore
gsave
false false false false 260.000000 [(Load Driving Test) (\(Variable Frequency Astable\)) ] 0 53300 45200 180.555557 text
grestore
gsave
false false false false 260.000000 [(Frequency Change Test) (\(50kHz Astable\)) ] 0 48300 45100 180.555557 text
grestore
gsave
44100 47300 44400 47300 10 line
44100 48000 44400 48000 10 line
44100 48400 44400 48400 10 line
44100 48800 44400 48800 10 line
43700 49400 43700 49700 10 line
42900 49400 42900 49700 10 line
42100 48400 42400 48400 10 line
42100 47300 42400 47300 10 line
42400 47100 44100 47100 10 line
44100 47100 44100 49400 10 line
44100 49400 42400 49400 10 line
42400 49400 42400 47100 10 line
gsave
false false false false 208.000000 [(OUT) ] 0 43700 47300 144.444443 text
grestore
gsave
false false false false 208.000000 [(CTRL) ] 0 43630 47998 144.444443 text
grestore
gsave
false false false false 208.000000 [(THRES) ] 0 43500 48400 144.444443 text
grestore
gsave
false false false false 208.000000 [(DISC) ] 0 43669 48802 144.444443 text
grestore
gsave
false false false false 208.000000 [(3) ] 0 44198 47368 144.444443 text
grestore
gsave
false false false false 208.000000 [(5) ] 0 44198 48066 144.444443 text
grestore
gsave
false false false false 208.000000 [(6) ] 0 44198 48465 144.444443 text
grestore
gsave
false false false false 208.000000 [(7) ] 0 44198 48870 144.444443 text
grestore
gsave
false false false false 208.000000 [(RESET) ] 0 42606 49202 144.444443 text
grestore
gsave
false false false false 208.000000 [(VCC) ] 0 43540 49202 144.444443 text
grestore
gsave
false false false false 208.000000 [(8) ] 0 43501 49522 144.444443 text
grestore
gsave
false false false false 208.000000 [(4) ] 0 42702 49522 144.444443 text
grestore
gsave
false false false false 208.000000 [(TRIG) ] 0 42500 48400 144.444443 text
grestore
gsave
false false false false 208.000000 [(GND) ] 0 42500 47300 144.444443 text
grestore
gsave
false false false false 208.000000 [(2) ] 0 42196 48465 144.444443 text
grestore
gsave
false false false false 208.000000 [(1) ] 0 42229 47368 144.444443 text
grestore
gsave
false false false false 260.000000 [(LM555) ] 0 42400 46900 180.555557 text
grestore
grestore
gsave
45300 48500 45500 48400 10 line
45500 48400 45300 48300 10 line
45300 48300 45500 48200 10 line
45500 48200 45300 48100 10 line
45300 48500 45500 48600 10 line
45500 48600 45400 48650 10 line
45400 48800 45400 48650 10 line
45400 47900 45400 48052 10 line
45300 48101 45400 48050 10 line
grestore
gsave
45300 49400 45500 49300 10 line
45500 49300 45300 49200 10 line
45300 49200 45500 49100 10 line
45500 49100 45300 49000 10 line
45300 49400 45500 49500 10 line
45500 49500 45400 49550 10 line
45400 49700 45400 49550 10 line
45400 48800 45400 48952 10 line
45300 49001 45400 48950 10 line
grestore
gsave
45400 47000 45400 47200 10 line
45400 47900 45400 47700 10 line
45200 47400 45600 47400 10 line
45200 47500 45600 47500 10 line
45400 47700 45400 47500 10 line
45400 47400 45400 47200 10 line
grestore
44400 48800 45400 48800 10 line
45400 47900 44800 47900 10 line
44400 48400 44800 48400 10 line
44800 47900 44800 50200 10 line
42100 48400 42100 50200 10 line
42100 50200 44800 50200 10 line
gsave
42100 47100 42100 47300 10 line
42000 47100 42200 47100 10 line
42055 47050 42145 47050 10 line
42080 47010 42120 47010 10 line
grestore
gsave
45400 46800 45400 47000 10 line
45300 46800 45500 46800 10 line
45355 46750 45445 46750 10 line
45380 46710 45420 46710 10 line
grestore
gsave
42900 49900 42900 49700 10 line
43000 49900 42800 49900 10 line
42945 49950 42855 49950 10 line
42920 49990 42880 49990 10 line
grestore
gsave
45400 49700 45400 49900 10 line
45250 49900 45550 49900 10 line
gsave
false false false false 208.000000 [(Vcc) ] 0 45275 49950 144.444443 text
grestore
grestore
gsave
43700 49700 43700 49900 10 line
43550 49900 43850 49900 10 line
gsave
false false false false 208.000000 [(Vcc) ] 0 43575 49950 144.444443 text
grestore
grestore
gsave
44300 46500 44500 46400 10 line
44500 46400 44300 46300 10 line
44300 46300 44500 46200 10 line
44500 46200 44300 46100 10 line
44300 46500 44500 46600 10 line
44500 46600 44400 46650 10 line
44400 46800 44400 46650 10 line
44400 45900 44400 46052 10 line
44300 46101 44400 46050 10 line
grestore
44400 46800 44400 47300 10 line
gsave
44400 45700 44400 45900 10 line
44300 45700 44500 45700 10 line
44355 45650 44445 45650 10 line
44380 45610 44420 45610 10 line
grestore
gsave
false false false false 260.000000 [(U1) ] 0 43900 46900 180.555557 text
grestore
gsave
false false false false 260.000000 [(RB) ] 90 45200 48100 180.555557 text
grestore
gsave
false false false false 260.000000 [(47k) ] 0 45600 48200 180.555557 text
grestore
gsave
false false false false 260.000000 [(RA) ] 90 45200 49000 180.555557 text
grestore
gsave
false false false false 260.000000 [(1k) ] 0 45600 49200 180.555557 text
grestore
gsave
false false false false 260.000000 [(C1) ] 90 45100 47200 180.555557 text
grestore
gsave
false false false false 260.000000 [(2.2nF) ] 0 45600 47000 180.555557 text
grestore
gsave
false false false false 260.000000 [(Rload) ] 90 44200 46100 180.555557 text
grestore
gsave
false false false false 260.000000 [(25 / 75) ] 0 44600 46200 180.555557 text
grestore
gsave
false false false false 260.000000 [(Load Driving Test) (\(3.45kHz Astable\)) ] 0 43400 45000 180.555557 text
grestore
gsave
54900 46100 54900 46300 10 line
54900 47000 54900 46800 10 line
54700 46500 55100 46500 10 line
54700 46600 55100 46600 10 line
54900 46800 54900 46600 10 line
54900 46500 54900 46300 10 line
grestore
gsave
false false false false 260.000000 [(Cload) ] 90 54600 46300 180.555557 text
grestore
gsave
false false false false 260.000000 [(1000pF) ] 0 55100 46100 180.555557 text
grestore
55900 47200 55900 47700 10 line
gsave
55550 48200 55400 48200 10 line
55800 48200 55699 48148 10 line
55799 48201 55698 48253 10 line
55800 48300 56000 48200 10 line
56000 48200 55800 48100 10 line
55800 48100 56000 48000 10 line
56000 48000 55800 47900 10 line
55800 48300 56000 48400 10 line
56000 48400 55900 48450 10 line
55900 48600 55900 48450 10 line
55900 47700 55900 47852 10 line
55800 47901 55900 47850 10 line
55800 48200 55550 48200 10 line
gsave
false false false false 208.000000 [(2) ] 90 55500 48100 144.444443 text
grestore
gsave
false false false false 208.000000 [(3) ] 90 56050 48500 144.444443 text
grestore
gsave
false false false false 260.000000 [(ccw) ] 90 55800 48300 180.555557 text
grestore
gsave
false false false false 208.000000 [(1) ] 90 56050 47800 144.444443 text
grestore
gsave
false false false false 260.000000 [(cw) ] 90 55800 47700 180.555557 text
grestore
grestore
gsave
false false false false 260.000000 [(RB) ] 90 55600 48300 180.555557 text
grestore
55900 49000 55900 48600 10 line
55400 48200 55300 48200 10 line
gsave
false false false false 260.000000 [(50k) ] 0 56000 47700 180.555557 text
grestore
newpath
55900 49000
25
0 360 arc
fill
newpath
55900 47200
25
0 360 arc
fill
newpath
55300 48600
25
0 360 arc
fill
newpath
55300 48600
25
0 360 arc
fill
newpath
55300 48600
25
0 360 arc
fill
newpath
55300 48200
25
0 360 arc
fill
newpath
50800 48900
25
0 360 arc
fill
newpath
50800 48000
25
0 360 arc
fill
newpath
50200 48500
25
0 360 arc
fill
newpath
50200 48500
25
0 360 arc
fill
newpath
50200 48500
25
0 360 arc
fill
newpath
45400 48800
25
0 360 arc
fill
newpath
45400 47900
25
0 360 arc
fill
newpath
44800 48400
25
0 360 arc
fill
newpath
44800 48400
25
0 360 arc
fill
newpath
44800 48400
25
0 360 arc
fill
newpath
55900 47200
25
0 360 arc
fill
newpath
55900 49000
25
0 360 arc
fill
newpath
55300 48200
25
0 360 arc
fill
newpath
55300 48200
25
0 360 arc
fill
showpage
%%End
